---
// Recibimos la fecha objetivo como prop
const { targetDate } = Astro.props;
---

<astro-hour data-target-date={targetDate.toISOString()}>
  <span id="hour-text"></span>
</astro-hour>

<script>
  class AstroHour extends HTMLElement {
    constructor() {
      super();
      // Obtenemos la fecha objetivo desde el atributo data
      const targetDate = new Date(Date.parse(this.dataset.targetDate || ""));
  
      // Validamos que la fecha sea válida
      if (isNaN(targetDate.getTime())) {
        console.error("Fecha objetivo inválida");
        return;
      }
  
      // Buscamos los elementos dentro del componente para evitar conflictos con otros en la página
      const dateEl = this.querySelector("#hour-text");
      // Format the time as hh:mm aa
      const hours = targetDate.getHours();
      const minutes = targetDate.getMinutes();
      const formattedTime = `${hours % 12 || 12}:${minutes.toString().padStart(2, '0')} ${hours >= 12 ? 'PM' : 'AM'}`;
      
      if (dateEl) {
        dateEl.textContent = formattedTime;
      }
    }
  }

  customElements.define('astro-hour', AstroHour);
</script>
